.\" This man page is Copyright (C) 2003 Lennert Buytenhek.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.TH iv_timer 3 2003-03-29 "ivykis" "ivykis programmer's manual"
.SH NAME
iv_register_timer, iv_unregister_timer \- deal with ivykis timers
.SH SYNOPSIS
.B #include <iv.h>
.sp
.nf
struct iv_timer
{
        struct timespec         expires;
        void                    *cookie;
        void                    (*handler)(void *);
};
.fi
.sp
.BI "INIT_IV_TIMER(struct iv_timer *" timer ");"
.br
.BI "void iv_register_timer(struct iv_timer *" timer ");"
.br
.BI "void iv_unregister_timer(struct iv_timer *" timer ");"
.br
.SH DESCRIPTION
The functions
.B iv_register_timer
and
.B iv_unregister_timer
register, respectively unregister, a timer with the ivykis core.  When
a timer that is registered becomes 'ready', due to the current system
clock value becoming greater than or equal to the timer's
.B ->expires
member field, the callback function specified by
.B ->handler
is called, with
.B ->cookie
as its first and sole argument.  When this happens, the timer is
transparently unregistered.
.PP
The application is allowed to change the
.B ->cookie
and
.B ->handler
members at any time.  The application is not allowed to change
the
.B ->expires
member while the timer is registered.
.PP
There is no limit on the number of timers registered at once.
.PP
See
.BR iv_examples (3)
for programming examples.
.SH "SEE ALSO"
.BR ivykis (3),
.BR iv_examples (3)
